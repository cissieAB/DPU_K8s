apiVersion: v1
kind: Namespace
metadata:
  name: e2sar-perf
---
apiVersion: v1
kind: Service
metadata:
  name: e2sar-receiver-svc
  namespace: e2sar-perf
spec:
  clusterIP: None  # This makes it a headless service
  selector:
    app: e2sar-receiver
  ports:
  - port: 19522
    targetPort: 19522
    protocol: TCP
    name: tcp
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: e2sar-network-policy
  namespace: e2sar-perf
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - {}  # Allow all ingress traffic
  egress:
  - {}  # Allow all egress traffic
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: e2sar-receiver
  namespace: e2sar-perf
spec:
  serviceName: "e2sar-receiver-svc"
  replicas: 1
  selector:
    matchLabels:
      app: e2sar-receiver
  template:
    metadata:
      labels:
        app: e2sar-receiver
      annotations:
        kubernetes.io/ingress-bandwidth: "100M"
        kubernetes.io/egress-bandwidth: "100M"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: receiver
        image: jlabtsai/e2sar-container:latest
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        command: ["/app/entrypoint-receiver.sh"]
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: URI
          value: "ejfat://useless@10.10.10.10:1234/lb/1?data=$(IP):19522&sync=192.168.77.7:1234"
        - name: DURATION
          value: "300"
        - name: BUF_SIZE
          value: "32768"
        - name: PORT
          value: "19522"
        - name: THREADS
          value: "1"
        - name: DIRECT_MODE
          value: "true"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: e2sar-sender
  namespace: e2sar-perf
spec:
  serviceName: "e2sar"
  replicas: 1
  selector:
    matchLabels:
      app: e2sar-sender
  template:
    metadata:
      labels:
        app: e2sar-sender
      annotations:
        kubernetes.io/ingress-bandwidth: "100M"
        kubernetes.io/egress-bandwidth: "100M"
    spec:
      terminationGracePeriodSeconds: 10
      volumes:
      - name: shared-data
        emptyDir: {}
      initContainers:
      - name: resolve-receiver
        image: busybox:1.28
        command: ["/bin/sh", "-c"]
        args:
        - |
          until nslookup e2sar-receiver-0.e2sar-receiver-svc.e2sar-perf.svc.cluster.local > /tmp/nslookup.out; do
            echo "Waiting for receiver DNS to be available..."
            sleep 5
          done
          cat /tmp/nslookup.out
          RECEIVER_IP=$(grep "Address 1:" /tmp/nslookup.out | tail -n1 | awk '{print $3}')
          echo "TARGET_IP=$RECEIVER_IP" > /shared/receiver-ip.env
          echo "Resolved receiver IP: $RECEIVER_IP"
        volumeMounts:
        - name: shared-data
          mountPath: /shared
      containers:
      - name: sender
        image: jlabtsai/e2sar-container:latest
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        command: ["/bin/bash", "-c"]
        args:
        - |
          source /shared/receiver-ip.env
          echo "Using receiver IP: $TARGET_IP"
          export IP="0.0.0.0"
          export URI="ejfat://useless@10.10.10.10:1234/lb/1?data=${TARGET_IP}&sync=192.168.77.7:1234"
          export MTU="512"
          export RATE="0.1"
          export LENGTH="512"
          export NUM_EVENTS="10000"
          export BUF_SIZE="32768"
          export DIRECT_MODE="true"
          /app/entrypoint-sender.sh
        volumeMounts:
        - name: shared-data
          mountPath: /shared 